(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{328:function(e,a,s){"use strict";s.r(a);var t=s(1),n=Object(t.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"run"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#run"}}),e._v(" Run")]),e._v(" "),s("p",[e._v("Now that our module is built and our app is configured to use it we can start running our application! The first thing to do is make sure that the "),s("code",[e._v("go.mod")]),e._v(" is correct. If you're using an IDE like vscode with "),s("code",[e._v("golang")]),e._v(" extensions enabled, this should be done automatically for you after saving each file. You can also make sure all dependencies are present by running "),s("code",[e._v("go mod tidy")]),e._v(".")]),e._v(" "),s("p",[e._v("Once your dependencies are set, run "),s("code",[e._v("make install")]),e._v(" to build your binaries! You will be creating two binaries. One is the "),s("code",[e._v("scavengeD")]),e._v(" which is a daemon that runs your actual application. The other binary is "),s("code",[e._v("scavengeCLI")]),e._v(" which is a tool for interacting with your running application.")]),e._v(" "),s("p",[e._v("After you run "),s("code",[e._v("make install")]),e._v(" you want to make sure you have access to both of those binaries. You can do this by running the "),s("code",[e._v("scavengeD --help")]),e._v(", where you should see the following:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("Scavenge Daemon "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\nUsage:\n  scavengeD "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("command"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n\nAvailable Commands:\n  init                Initialize private validator, p2p, genesis, and application configuration files\n  collect-gentxs      Collect genesis txs and output a genesis.json "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),e._v("\n  gentx               Generate a genesis tx carrying a self delegation\n  validate-genesis    validates the genesis "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),e._v(" at the default location or at the location passed as an arg\n  add-genesis-account Add genesis account to genesis.json\n  start               Run the full node\n  unsafe-reset-all    Resets the blockchain database, removes address book files, and resets priv_validator.json to the genesis state\n                      \n  tendermint          Tendermint subcommands\n  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v("              Export state to JSON\n                      \n  version             Print the app version\n  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("help")]),e._v("                Help about any "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("command")]),e._v("\n\nFlags:\n  -h, --help                    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("help")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" scavengeD\n      --home string             directory "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" config and data "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("default "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/home/billy/.scavengeD"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n      --inv-check-period uint   Assert registered invariants every N blocks\n      --log_level string        Log level "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("default "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"main:info,state:info,*:error"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n      --trace                   print out full stack trace on errors\n\nUse "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"scavengeD [command] --help"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("more")]),e._v(" information about a command.\n")])])]),s("p",[e._v("You should also be able to run "),s("code",[e._v("scavengeCLI --help")]),e._v(" which should result in the following screen:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("Scavenge Client\n\nUsage:\n  scavengeCLI "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("command"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n\nAvailable Commands:\n  status      Query remote node "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" status\n  config      Create or query an application CLI configuration "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),e._v("\n  query       Querying subcommands\n  tx          Transactions subcommands\n              \n  rest-server Start LCD "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("light-client daemon"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(", a "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("local")]),e._v(" REST server\n              \n  keys        Add or view "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("local")]),e._v(" private keys\n              \n  version     Print the app version\n  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("help")]),e._v("        Help about any "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("command")]),e._v("\n\nFlags:\n      --chain-id string   Chain ID of tendermint node\n  -e, --encoding string   Binary encoding "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("hex"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("b64"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("btc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("default "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"hex"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  -h, --help              "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("help")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" scavengeCLI\n      --home string       directory "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" config and data "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("default "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/home/billy/.scavengeCLI"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  -o, --output string     Output "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("format")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("text"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("default "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"text"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n      --trace             print out full stack trace on errors\n\nUse "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"scavengeCLI [command] --help"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("more")]),e._v(" information about a command.\n")])])]),s("p",[e._v("Now we should create some users within our app that have some initial coins that can be used as bounties for other players. First we create two users with the following commands:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("scavengeCLI keys "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" me\nscavengeCLI keys "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" you\n")])])]),s("p",[e._v("Each command will come with a prompt to set a password to secure the account. I usually use "),s("code",[e._v("1234567890")]),e._v(" when I'm developing so that I don't forget.")]),e._v(" "),s("p",[e._v("Next you need to initialize your application using the Daemon command with a "),s("code",[e._v("<moniker>")]),e._v(" (which is just a nickname for your machine) and a "),s("code",[e._v("<chain-id>")]),e._v(" which will be a way to identify your application.")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("scavengeD init mynode --chain-id scavenge\n")])])]),s("p",[e._v("Now you can add your two accounts to the initial state of the application, called the Genesis, using the following commands:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("scavengeD add-genesis-account "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("scavengeCLI keys show me -a"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" 1000foo,100000000stake\nscavengeD add-genesis-account "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("scavengeCLI keys show you -a"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" 1foo\n")])])]),s("p",[e._v("Notice we've combined two commands, which includes one from the Daemon and one from the CLI. The CLI command queries the accounts that we created but displays just their addresses. "),s("strong",[e._v("Addresses are a bit like user IDs")]),e._v(". You'll also notice that we added some coins to the different users. For the user "),s("code",[e._v("me")]),e._v(" we added some token called "),s("code",[e._v("foo")]),e._v(" as well as some token called "),s("code",[e._v("stake")]),e._v(". We will be using "),s("code",[e._v("stake")]),e._v(" within the Proof-Of-Stake validation process. Since the user "),s("code",[e._v("me")]),e._v(" is the only user with "),s("code",[e._v("stake")]),e._v(", they will be the only "),s("strong",[e._v("Validator")]),e._v(" interacting with this application. That's great for our purposes since we're just playing around but if you were to run an application in production you might want to have a more Validators helping to make sure your app runs correctly.")]),e._v(" "),s("p",[e._v("Before we start the application it's good to configure your CLI to know that it will be interacting with this app, and not any other one. These commands will tell the CLI to talk to just this application:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("scavengeCLI config chain-id scavenge\nscavengeCLI config output json\nscavengeCLI config indent "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\nscavengeCLI config trust-node "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n")])])]),s("p",[e._v("Now we want to let the application know that it will be the user "),s("code",[e._v("me")]),e._v(" who will be validating so we run this command:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("scavengeD gentx --name me\n")])])]),s("p",[e._v("This command will ask for the password, which if you're like me is just "),s("code",[e._v("1234567890")]),e._v(".")]),e._v(" "),s("p",[e._v("Our finaly step is to tell the application that we're done configuring it. This will collect all of our initial configuraiton and prepare the application to begin:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("scavengeD collect-gentxs\n")])])]),s("p",[e._v("I usually combine all of these commands into a single executable file so that if I make changes to the application I don't have to run each one manually. Since some of the commands require a password to be entered I use bash piping to feed in my "),s("code",[e._v("1234567890")]),e._v(" password. I put everything into a file called "),s("code",[e._v("./init.sh")]),e._v(" so that it looks like so:")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[e._v("#!/bin/bash")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" -r ~/.scavengeCLI\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" -r ~/.scavengeD\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1234567890"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" scavengeCLI keys "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" me\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1234567890"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" scavengeCLI keys "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" you\nscavengeD init mynode --chain-id scavenge\nscavengeD add-genesis-account "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("scavengeCLI keys show me -a"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" 1000foo,100000000stake\nscavengeD add-genesis-account "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("scavengeCLI keys show you -a"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" 1foo\nscavengeCLI config chain-id scavenge\nscavengeCLI config output json\nscavengeCLI config indent "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\nscavengeCLI config trust-node "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1234567890"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" scavengeD gentx --name me\nscavengeD collect-gentxs")])])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[e._v("#!/bin/bash")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" -r ~/.scavengeCLI\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" -r ~/.scavengeD\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1234567890"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" scavengeCLI keys "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" me\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1234567890"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" scavengeCLI keys "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" you\nscavengeD init mynode --chain-id scavenge\nscavengeD add-genesis-account "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("scavengeCLI keys show me -a"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" 1000foo,100000000stake\nscavengeD add-genesis-account "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("scavengeCLI keys show you -a"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" 1foo\nscavengeCLI config chain-id scavenge\nscavengeCLI config output json\nscavengeCLI config indent "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\nscavengeCLI config trust-node "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1234567890"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" scavengeD gentx --name me\nscavengeD collect-gentxs\n")])])]),s("p",[e._v("--\x3e")]),e._v(" "),s("p",[s("strong",[e._v("Now, "),s("em",[e._v("finally")]),e._v(", you can run your APPLICATION!")])]),e._v(" "),s("p",[e._v("To do so open a new terminal window and type the following:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("scavengD start\n")])])]),s("p",[e._v("That's it! You're up and running!")]),e._v(" "),s("p",[e._v("To interact with your application take a look at the example commands used to create and solve scavenges "),s("router-link",{attrs:{to:"/scavenge/tutorial/12-play.html"}},[e._v("here")]),e._v(".")],1)])}),[],!1,null,null,null);a.default=n.exports}}]);