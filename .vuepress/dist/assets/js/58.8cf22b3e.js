(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{338:function(a,s,t){"use strict";t.r(s);var e=t(1),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"try-it-out"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#try-it-out"}}),a._v(" Try It Out")]),a._v(" "),t("p",[a._v("We are almost finished but lets take a quick moment to try out the parts\nwe've built to see how they work.")]),a._v(" "),t("p",[a._v("Run these commands and take a looks at the help text for the subcommands they\nsupport.")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ hcd\n$ hccli\n")])])]),t("h3",{attrs:{id:"init"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#init"}}),a._v(" Init")]),a._v(" "),t("p",[a._v("Look interesting? Ok lets start our first chain. All chain data and\nconfiguration are stored in a default dir "),t("code",[a._v("~/.hellod")]),a._v(' (set in the starter\npackage for now). Our new chain needs to be initialized with a "moniker". This\nwill auto-generate default config files and a '),t("code",[a._v("genesis.json")]),a._v(" containing the\ndefault genesis state of the modules we are using in our simple app.")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ hcd init hellochain\n")])])]),t("h3",{attrs:{id:"genesis"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#genesis"}}),a._v(" Genesis")]),a._v(" "),t("p",[a._v("But what about coins? Let's seed our genesis.json with some accounts and\nbalances of coins for them to use (NOTE a Cosmos account does not exist until\nit has been funded by a Tx).")]),a._v(" "),t("p",[a._v("First you need to create keys for your different accounts. Give them an easy\npassword you can remember.")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("\n$ hccli keys "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" alice\n\n$ hccli keys "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" bob\n\n")])])]),t("p",[a._v("Next we need to add these accounts to "),t("code",[a._v("genesis.json")]),a._v(" with a corresponding\npositive balance. The CLI package of "),t("code",[a._v("genutil")]),a._v(' provides the command for us. We\nwill give each account plenty of "stake" which is the default denomination for\nthe bonding coin. We can also grant more coins of our own denomination. NOTE:\nthe "$()" syntax allows us to execute a subcommand within our shell command in\nthis case returning the address for a given acount.')]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ hcd add-genesis-account "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("hccli keys show alice -a"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" 100000000000stake,100hello\n\n$ hcd add-genesis-account "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("hccli keys show bob -a"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" 100000000000stake,1000hello\n\n")])])]),t("p",[a._v("Now start up your blockchain node. Dont worry it won't be able to find seeds.")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ hcd start\nI"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2019")]),a._v("-08-06"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("16")]),a._v(":59:15.977"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" Starting ABCI with Tendermint                "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("module")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("main\nE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2019")]),a._v("-08-06"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("16")]),a._v(":59:16.005"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" Couldn't connect to any seeds                "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("module")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("p2p\nI"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2019")]),a._v("-08-06"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("16")]),a._v(":59:21.019"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" Executed block                               "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("module")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("state "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("height")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("validTxs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("invalidTxs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\nI"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2019")]),a._v("-08-06"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("16")]),a._v(":59:21.020"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" Committed state                              "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("module")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("state "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("height")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("txs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("appHash")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("7377248821C962C10C81007882954D749BC65B1F458EFE40A844F78FBBD9F635\nI"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2019")]),a._v("-08-06"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("16")]),a._v(":59:26.029"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" Executed block                               "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("module")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("state "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("height")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("validTxs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("invalidTxs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\nI"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2019")]),a._v("-08-06"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("16")]),a._v(":59:31.037"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" Committed state                              "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("module")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("state "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("height")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("txs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("appHash")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("7377248821C962C10C81007882954D749BC65B1F458EFE40A844F78FBBD9F635\nI"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2019")]),a._v("-08-06"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("16")]),a._v(":59:36.047"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" Executed block                               "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("module")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("state "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("height")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("validTxs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("invalidTxs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".and "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("watch")]),a._v(" the blocks roll by"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("\n")])])]),t("p",[a._v("And in another window, lets now try to query our running node. Start with the\n"),t("code",[a._v("status")]),a._v(" query.")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ hccli status\n")])])]),t("p",[a._v("Now lets check our account balances and try sending a few transactions. These\nqueries should return the acount balances you set in the add-genesis-account\ncommand.")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ hccli query account "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("hccli keys show alice -a"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n\n$ hccli query account "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("hccli keys show bob -a"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n")])])]),t("p",[a._v("And to send coins from one account to another...")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Usage: hccli tx send [from_key_or_address] [to_address] [amount] [flags]")]),a._v("\n\n$ hccli tx send "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("hccli keys show alice -a"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("hccli keys show bob -a"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" 50hello\n\n")])])]),t("p",[a._v("These commands will print a JSON representation of the Tx for you to inspect\nbefore entering your password to sign and broadcast it to your node. Query the\naccount afterward to see if the balance changed.")]),a._v(" "),t("p",[a._v("Ok well done, we now have a basic blockchain. It can send and receive coins,\nbig deal. Now lets add some functionality of our own making to see how flexible\nthe Cosmos SDK can be.")])])}),[],!1,null,null,null);s.default=n.exports}}]);