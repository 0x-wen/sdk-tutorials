(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{361:function(e,s,a){"use strict";a.r(s);var t=a(1),n=Object(t.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"build-and-run-the-app"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#build-and-run-the-app"}}),e._v(" Build and run the app")]),e._v(" "),a("h2",{attrs:{id:"building-the-nameservice-application"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#building-the-nameservice-application"}}),e._v(" Building the "),a("code",[e._v("nameservice")]),e._v(" application")]),e._v(" "),a("p",[e._v("This repo contains a complete "),a("code",[e._v("nameservice")]),e._v(" application. If you want to build this completed version "),a("strong",[e._v("Go 1.13.0+")]),e._v(" is required.")]),e._v(" "),a("p",[e._v("Add some parameters to environment is necessary if you have never used the "),a("code",[e._v("go mod")]),e._v(" before.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" -p "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/go/bin\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"export GOBIN=\\'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$GOPATH")]),e._v('/bin"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v(" ~/.bash_profile\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"export PATH=\\'),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$PATH")]),e._v(":\\"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$GOBIN")]),e._v('"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v(" ~/.bash_profile\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("source")]),e._v(" ~/.bash_profile\n")])])]),a("p",[e._v("Now, you can install and run the application.")]),e._v(" "),a("p",[e._v("If you have not completed the tutorial then you can follow the below cloning instructions:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# Clone the source of the tutorial repository\ngit clone https://github.com/cosmos/sdk-tutorials.git\ncd sdk-tutorials\ncd namerservice\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Install the app into your $GOBIN")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Now you should be able to run the following commands:")]),e._v("\nnsd "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("help")]),e._v("\nnscli "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("help")]),e._v("\n")])])]),a("h2",{attrs:{id:"running-the-live-network-and-using-the-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#running-the-live-network-and-using-the-commands"}}),e._v(" Running the live network and using the commands")]),e._v(" "),a("p",[e._v("To initialize configuration and a "),a("code",[e._v("genesis.json")]),e._v(" file for your application and an account for the transactions, start by running:")]),e._v(" "),a("blockquote",[a("p",[a("em",[a("em",[e._v("NOTE")])]),e._v(": In the below commands addresses are pulled using terminal utilities. You can also just input the raw strings saved from creating keys, shown below. The commands require "),a("a",{attrs:{href:"https://stedolan.github.io/jq/download/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("jq")]),a("OutboundLink")],1),e._v(" to be installed on your machine.")])]),e._v(" "),a("blockquote",[a("p",[a("em",[a("em",[e._v("NOTE")])]),e._v(": If you have run the tutorial before, you can start from scratch with a "),a("code",[e._v("nsd unsafe-reset-all")]),e._v(" or by deleting both of the home folders "),a("code",[e._v("rm -rf ~/.nscli ~/.nsd")])])]),e._v(" "),a("blockquote",[a("p",[a("em",[a("em",[e._v("NOTE")])]),e._v(": If you have the Cosmos app for ledger and you want to use it, when you create the key with "),a("code",[e._v("nscli keys add jack")]),e._v(" just add "),a("code",[e._v("--ledger")]),e._v(" at the end. That's all you need. When you sign, "),a("code",[e._v("jack")]),e._v(" will be recognized as a Ledger key and will require a device.")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Initialize configuration files and genesis file")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# moniker is the name of your node")]),e._v("\nnsd init "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("moniker"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --chain-id namechain\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Copy the `Address` output here and save it for later use")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# [optional] add "--ledger" at the end to use a Ledger Nano S')]),e._v("\nnscli keys "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" jack\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Copy the `Address` output here and save it for later use")]),e._v("\nnscli keys "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" alice\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Add both accounts, with coins to the genesis file")]),e._v("\nnsd add-genesis-account "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("nscli keys show jack -a"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" 1000nametoken,100000000stake\nnsd add-genesis-account "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("nscli keys show alice -a"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" 1000nametoken,100000000stake\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Configure your CLI to eliminate need for chain-id flag")]),e._v("\nnscli config chain-id namechain\nnscli config output json\nnscli config indent "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\nnscli config trust-node "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n\nnsd gentx --name jack "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("or your key_name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),a("p",[e._v("After you have generated a genesis transaction, you will have to input the genTx into the genesis file, so that your nameservice chain is aware of the validators. To do so, run:")]),e._v(" "),a("p",[a("code",[e._v("nsd collect-gentxs")])]),e._v(" "),a("p",[e._v("and to make sure your genesis file is correct, run:")]),e._v(" "),a("p",[a("code",[e._v("nsd validate-genesis")])]),e._v(" "),a("p",[e._v("You can now start "),a("code",[e._v("nsd")]),e._v(" by calling "),a("code",[e._v("nsd start")]),e._v(". You will see logs begin streaming that represent blocks being produced, this will take a couple of seconds.")]),e._v(" "),a("p",[e._v("You have run your first node successfully.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# First check the accounts to ensure they have funds")]),e._v("\nnscli query account "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("nscli keys show jack -a"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\nnscli query account "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("nscli keys show alice -a"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Buy your first name using your coins from the genesis file")]),e._v("\nnscli tx nameservice buy-name jack.id 5nametoken --from jack\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set the value for the name you just bought")]),e._v("\nnscli tx nameservice set-name jack.id "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("8.8")]),e._v(".8.8 --from jack\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Try out a resolve query against the name you registered")]),e._v("\nnscli query nameservice resolve jack.id\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# > 8.8.8.8")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Try out a whois query against the name you just registered")]),e._v("\nnscli query nameservice whois jack.id\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# > {"value":"8.8.8.8","owner":"cosmos1l7k5tdt2qam0zecxrx78yuw447ga54dsmtpk2s","price":[{"denom":"nametoken","amount":"5"}]}')]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Alice buys name from jack")]),e._v("\nnscli tx nameservice buy-name jack.id 10nametoken --from alice\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Alice decides to delete the name she just bought from jack")]),e._v("\nnscli tx nameservice delete-name jack.id --from alice\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Try out a whois query against the name you just deleted")]),e._v("\nnscli query nameservice whois jack.id\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# > {"value":"","owner":"","price":[{"denom":"nametoken","amount":"1"}]}')]),e._v("\n")])])]),a("h1",{attrs:{id:"run-second-node-on-another-machine-optional"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#run-second-node-on-another-machine-optional"}}),e._v(" Run second node on another machine (Optional)")]),e._v(" "),a("p",[e._v("Open terminal to run commands against that just created to install nsd and nscli")]),e._v(" "),a("h2",{attrs:{id:"init-use-another-moniker-and-same-namechain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-use-another-moniker-and-same-namechain"}}),e._v(" init use another moniker and same namechain")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("nsd init "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("moniker-"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[e._v("2")]),e._v(">")]),e._v(" --chain-id namechain\n")])])]),a("h2",{attrs:{id:"overwrite-nsd-config-genesis-json-with-first-node-s-genesis-json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overwrite-nsd-config-genesis-json-with-first-node-s-genesis-json"}}),e._v(" overwrite ~/.nsd/config/genesis.json with first node's genesis.json")]),e._v(" "),a("h2",{attrs:{id:"change-persistent-peers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#change-persistent-peers"}}),e._v(" change persistent_peers")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v(" /.nsd/config/config.toml\npersistent_peers "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"id@first_node_ip:26656"')]),e._v("\nrun "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"nscli status"')]),e._v(" on first node to get id.\n")])])]),a("h2",{attrs:{id:"start-this-second-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#start-this-second-node"}}),e._v(" start this second node")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("nsd start\n")])])]),a("h3",{attrs:{id:"congratulations-you-have-built-a-cosmos-sdk-application-this-tutorial-is-now-complete-if-you-want-to-see-how-to-run-the-same-commands-using-the-rest-server-you-ll-need-to-run-the-rest-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#congratulations-you-have-built-a-cosmos-sdk-application-this-tutorial-is-now-complete-if-you-want-to-see-how-to-run-the-same-commands-using-the-rest-server-you-ll-need-to-run-the-rest-server"}}),e._v(" Congratulations, you have built a Cosmos SDK application! This tutorial is now complete. If you want to see how to run the same commands using the REST server you'll need to run the REST server.")])])}),[],!1,null,null,null);s.default=n.exports}}]);