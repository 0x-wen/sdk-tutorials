(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{363:function(e,n,s){"use strict";s.r(n);var t=s(1),o=Object(t.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"go-mod-and-makefile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#go-mod-and-makefile"}}),e._v(" go.mod and Makefile")]),e._v(" "),s("h2",{attrs:{id:"makefile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#makefile"}}),e._v(" "),s("code",[e._v("Makefile")])]),e._v(" "),s("p",[e._v("Help users build your application by writing a "),s("code",[e._v("./Makefile")]),e._v(" in the root directory that includes common commands. The scaffolding tool has created a generic makefile that you will be able to use:")]),e._v(" "),s("blockquote",[s("p",[s("em",[s("em",[e._v("NOTE")])]),e._v(": The below Makefile contains some of same commands as the Cosmos SDK and Tendermint Makefiles.")])]),e._v(" "),s("div",{staticClass:"language-com/okwme/scavenge/nameservice/Makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("PACKAGES=$(shell go list ./... | grep -v '/simulation')\n\nVERSION := $(shell echo $(shell git describe --tags) | sed 's/^v//')\nCOMMIT := $(shell git log -1 --format='%H')\n\nldflags = -X github.com/cosmos/cosmos-sdk/version.Name=NameService \\\n\t-X github.com/cosmos/cosmos-sdk/version.ServerName=nsd \\\n\t-X github.com/cosmos/cosmos-sdk/version.ClientName=nscli \\\n\t-X github.com/cosmos/cosmos-sdk/version.Version=$(VERSION) \\\n\t-X github.com/cosmos/cosmos-sdk/version.Commit=$(COMMIT) \n\nBUILD_FLAGS := -ldflags '$(ldflags)'\n\ninclude Makefile.ledger\nall: install\n\ninstall: go.sum\n\t\tgo install -mod=readonly $(BUILD_FLAGS) ./cmd/nsd\n\t\tgo install -mod=readonly $(BUILD_FLAGS) ./cmd/nscli\n\ngo.sum: go.mod\n\t\t@echo \"--\x3e Ensure dependencies have not been modified\"\n\t\tGO111MODULE=on go mod verify\n\ntest:\n\t@go test -mod=readonly $(PACKAGES)\n")])])]),s("h3",{attrs:{id:"how-about-including-ledger-nano-s-support"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#how-about-including-ledger-nano-s-support"}}),e._v(" How about including Ledger Nano S support?")]),e._v(" "),s("p",[e._v("This requires a few small changes:")]),e._v(" "),s("ul",[s("li",[e._v("Create a file "),s("code",[e._v("Makefile.ledger")]),e._v(" with the following content:")])]),e._v(" "),s("div",{staticClass:"language-ledger extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("LEDGER_ENABLED ?= true\n\nbuild_tags =\nifeq ($(LEDGER_ENABLED),true)\n  ifeq ($(OS),Windows_NT)\n    GCCEXE = $(shell where gcc.exe 2> NUL)\n    ifeq ($(GCCEXE),)\n      $(error gcc.exe not installed for ledger support, please install or set LEDGER_ENABLED=false)\n    else\n      build_tags += ledger\n    endif\n  else\n    UNAME_S = $(shell uname -s)\n    ifeq ($(UNAME_S),OpenBSD)\n      $(warning OpenBSD detected, disabling ledger support (https://github.com/cosmos/cosmos-sdk/issues/1988))\n    else\n      GCC = $(shell command -v gcc 2> /dev/null)\n      ifeq ($(GCC),)\n        $(error gcc not installed for ledger support, please install or set LEDGER_ENABLED=false)\n      else\n        build_tags += ledger\n      endif\n    endif\n  endif\nendif\n")])])]),s("ul",[s("li",[e._v("Add "),s("code",[e._v("include Makefile.ledger")]),e._v(" at the beginning of the Makefile:")])]),e._v(" "),s("div",{staticClass:"language-com/okwme/scavenge/nameservice/Makefile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("PACKAGES=$(shell go list ./... | grep -v '/simulation')\n\nVERSION := $(shell echo $(shell git describe --tags) | sed 's/^v//')\nCOMMIT := $(shell git log -1 --format='%H')\n\nldflags = -X github.com/cosmos/cosmos-sdk/version.Name=NameService \\\n\t-X github.com/cosmos/cosmos-sdk/version.ServerName=nsd \\\n\t-X github.com/cosmos/cosmos-sdk/version.ClientName=nscli \\\n\t-X github.com/cosmos/cosmos-sdk/version.Version=$(VERSION) \\\n\t-X github.com/cosmos/cosmos-sdk/version.Commit=$(COMMIT) \n\nBUILD_FLAGS := -ldflags '$(ldflags)'\n\ninclude Makefile.ledger\nall: install\n\ninstall: go.sum\n\t\tgo install -mod=readonly $(BUILD_FLAGS) ./cmd/nsd\n\t\tgo install -mod=readonly $(BUILD_FLAGS) ./cmd/nscli\n\ngo.sum: go.mod\n\t\t@echo \"--\x3e Ensure dependencies have not been modified\"\n\t\tGO111MODULE=on go mod verify\n\ntest:\n\t@go test -mod=readonly $(PACKAGES)\n")])])]),s("h2",{attrs:{id:"go-mod"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#go-mod"}}),e._v(" "),s("code",[e._v("go.mod")])]),e._v(" "),s("p",[e._v("Golang has a few dependency management tools. In this tutorial you will be using "),s("a",{attrs:{href:"https://github.com/golang/go/wiki/Modules",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("Go Modules")]),s("OutboundLink")],1),e._v(". "),s("code",[e._v("Go Modules")]),e._v(" uses a "),s("code",[e._v("go.mod")]),e._v(" file in the root of the repository to define what dependencies the application needs. Cosmos SDK apps currently depend on specific versions of some libraries. The below manifest contains all the necessary versions. To get started replace the contents of the "),s("code",[e._v("./go.mod")]),e._v(" file with the "),s("code",[e._v("constraints")]),e._v(" and "),s("code",[e._v("overrides")]),e._v(" below:")]),e._v(" "),s("blockquote",[s("p",[s("em",[s("em",[e._v("NOTE")])]),e._v(": If you are following along in your own repo you will need to change the module path to reflect that ("),s("code",[e._v("github.com/{ .Username }/{ .Project.Repo }")]),e._v(").")])]),e._v(" "),s("ul",[s("li",[e._v("You will have to run "),s("code",[e._v("go get ./...")]),e._v(" to get all the modules the application is using. This command will get the dependency version stated in the "),s("code",[e._v("go.mod")]),e._v(" file.")]),e._v(" "),s("li",[e._v("If you would like to use a specific version of a dependency then you have to run "),s("code",[e._v("go get github.com/<github_org>/<repo_name>@<version>")])])]),e._v(" "),s("div",{staticClass:"language-mod extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("module github.com/cosmos/sdk-tutorials/nameservice\n\ngo 1.13\n\nrequire (\n\tgithub.com/cosmos/cosmos-sdk v0.37.5\n\tgithub.com/gorilla/mux v1.7.3\n\tgithub.com/spf13/cobra v0.0.5\n\tgithub.com/spf13/viper v1.6.2\n\tgithub.com/stretchr/testify v1.4.0\n\tgithub.com/tendermint/go-amino v0.15.1\n\tgithub.com/tendermint/tendermint v0.32.8\n\tgithub.com/tendermint/tm-db v0.2.0\n)\n")])])]),s("h2",{attrs:{id:"building-the-app"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#building-the-app"}}),e._v(" Building the app")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Install the app into your $GOBIN")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Now you should be able to run the following commands:")]),e._v("\nnsd "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("help")]),e._v("\nnscli "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("help")]),e._v("\n")])])]),s("h3",{attrs:{id:"congratulations-you-have-finished-your-nameservice-application-try-running-and-interacting-with-it"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#congratulations-you-have-finished-your-nameservice-application-try-running-and-interacting-with-it"}}),e._v(" Congratulations, you have finished your nameservice application! Try running and interacting with it!")])])}),[],!1,null,null,null);n.default=o.exports}}]);